#!/usr/bin/env python3
"""
Comprehensive Paired Multi-Omics Data Analysis Script

This script analyzes the overlap between RNA-seq and WGS data across all datasets
to identify samples/subjects with both transcriptomic and genomic data available.

Author: Generated by Claude Code
Date: 2025-05-29
"""

import pandas as pd
import json
import os
from collections import defaultdict, Counter
from datetime import datetime
import numpy as np

class PairedOmicsAnalyzer:
    """Analyzer for identifying paired RNA-seq and WGS data."""
    
    def __init__(self):
        self.rnaseq_data = None
        self.wgs_data = None
        self.paired_data = None
        self.analysis_results = {}
        
    def load_inventories(self, rnaseq_file=None, wgs_file=None):
        """Load RNA-seq and WGS inventories."""
        if rnaseq_file is None:
            rnaseq_file = "sample_subject_inventory.csv"
        if wgs_file is None:
            wgs_file = "wgs_sample_inventory.csv"
            
        try:
            self.rnaseq_data = pd.read_csv(rnaseq_file)
            print(f"✅ Loaded RNA-seq data: {len(self.rnaseq_data):,} samples")
        except FileNotFoundError:
            print(f"❌ RNA-seq inventory file not found: {rnaseq_file}")
            return False
            
        try:
            self.wgs_data = pd.read_csv(wgs_file)
            print(f"✅ Loaded WGS data: {len(self.wgs_data):,} samples")
        except FileNotFoundError:
            print(f"❌ WGS inventory file not found: {wgs_file}")
            return False
            
        return True
    
    def standardize_cell_line_names(self, name):
        """Standardize cell line names for comparison."""
        if pd.isna(name):
            return None
            
        # Convert to string and clean
        name = str(name).upper().strip()
        
        # Remove common suffixes/prefixes for comparison
        name = name.replace('_WGS_PAIR1', '')
        name = name.replace('ENCFF', '')
        name = name.replace('ENCDO', '')
        
        # Handle common name variations
        name_mappings = {
            'NCI-H460': 'NCIH460',
            'NCI_H460': 'NCIH460', 
            'NCI H460': 'NCIH460',
            'SK-N-MC': 'SKNMC',
            'SK_N_MC': 'SKNMC',
            'SK N MC': 'SKNMC'
        }
        
        return name_mappings.get(name, name)
    
    def extract_gtex_subject(self, sample_id):
        """Extract GTEx subject ID from sample ID."""
        if pd.isna(sample_id):
            return None
            
        sample_id = str(sample_id)
        if sample_id.startswith('GTEX-'):
            # GTEx format: GTEX-XXXXX-... -> extract GTEX-XXXXX
            parts = sample_id.split('-')
            if len(parts) >= 2:
                return f"{parts[0]}-{parts[1]}"  # GTEX-XXXXX
        return sample_id
    
    def analyze_encode_overlap(self):
        """Analyze ENCODE cell line overlap between RNA-seq and WGS."""
        print("\n=== ENCODE Cell Line Analysis ===")
        
        # Get ENCODE data
        rnaseq_encode = self.rnaseq_data[self.rnaseq_data['dataset'] == 'ENCODE'].copy()
        wgs_encode = self.wgs_data[self.wgs_data['dataset'] == 'ENCODE'].copy()
        
        print(f"RNA-seq ENCODE samples: {len(rnaseq_encode)}")
        print(f"WGS ENCODE samples: {len(wgs_encode)}")
        
        # Extract cell line names for comparison
        rnaseq_encode['cell_line_std'] = rnaseq_encode['sample_id'].apply(self.extract_cell_line_from_encode)
        wgs_encode['cell_line_std'] = wgs_encode['sample_id'].apply(self.standardize_cell_line_names)
        
        # Find overlaps
        rnaseq_lines = set(rnaseq_encode['cell_line_std'].dropna())
        wgs_lines = set(wgs_encode['cell_line_std'].dropna())
        
        overlap = rnaseq_lines.intersection(wgs_lines)
        rnaseq_only = rnaseq_lines - wgs_lines
        wgs_only = wgs_lines - rnaseq_lines
        
        print(f"\n📊 ENCODE Overlap Results:")
        print(f"  Paired cell lines (both RNA-seq + WGS): {len(overlap)}")
        print(f"  RNA-seq only: {len(rnaseq_only)}")
        print(f"  WGS only: {len(wgs_only)}")
        
        if overlap:
            print(f"\n✅ Paired ENCODE cell lines:")
            for line in sorted(overlap):
                print(f"    - {line}")
                
        if rnaseq_only:
            print(f"\n📊 RNA-seq only ENCODE:")
            for line in sorted(rnaseq_only):
                print(f"    - {line}")
                
        if wgs_only:
            print(f"\n📊 WGS only ENCODE:")
            for line in sorted(wgs_only):
                print(f"    - {line}")
        
        return {
            'paired_lines': list(overlap),
            'rnaseq_only': list(rnaseq_only),
            'wgs_only': list(wgs_only),
            'overlap_count': len(overlap),
            'rnaseq_count': len(rnaseq_lines),
            'wgs_count': len(wgs_lines)
        }
    
    def extract_cell_line_from_encode(self, sample_id):
        """Extract cell line name from ENCODE sample ID via metadata mapping."""
        # Load ENCODE mapping if available
        try:
            with open("encff_to_cellline_mapping.json", 'r') as f:
                mapping = json.load(f)
                return mapping.get(str(sample_id), None)
        except FileNotFoundError:
            # Create the mapping based on discovered data
            encode_mapping = {
                "ENCFF244DNJ": "A549",
                "ENCFF171FQU": "K562", 
                "ENCFF863QWG": "HepG2",
                "ENCFF640FPG": "GM23248",
                "ENCFF685WJV": "Caki2",
                "ENCFF876SRX": "NCI-H460",
                "ENCFF710IFD": "Panc1"
            }
            return encode_mapping.get(str(sample_id), None)
    
    def analyze_gtex_overlap(self):
        """Analyze GTEx subject overlap between RNA-seq and WGS."""
        print("\n=== GTEx Subject Analysis ===")
        
        # Get GTEx data
        rnaseq_gtex = self.rnaseq_data[self.rnaseq_data['dataset'] == 'GTEx'].copy()
        wgs_gtex = self.wgs_data[self.wgs_data['dataset'] == 'GTEx'].copy()
        
        print(f"RNA-seq GTEx samples: {len(rnaseq_gtex):,}")
        print(f"WGS GTEx samples: {len(wgs_gtex):,}")
        
        # Extract subject IDs
        rnaseq_gtex['gtex_subject'] = rnaseq_gtex['subject_id'].apply(self.extract_gtex_subject)
        wgs_gtex['gtex_subject'] = wgs_gtex['sample_id'].apply(self.extract_gtex_subject)
        
        # Get unique subjects
        rnaseq_subjects = set(rnaseq_gtex['gtex_subject'].dropna())
        wgs_subjects = set(wgs_gtex['gtex_subject'].dropna())
        
        overlap = rnaseq_subjects.intersection(wgs_subjects)
        rnaseq_only = rnaseq_subjects - wgs_subjects
        wgs_only = wgs_subjects - rnaseq_subjects
        
        print(f"\n📊 GTEx Subject Overlap Results:")
        print(f"  Unique RNA-seq subjects: {len(rnaseq_subjects):,}")
        print(f"  Unique WGS subjects: {len(wgs_subjects):,}")
        print(f"  Paired subjects (both RNA-seq + WGS): {len(overlap):,}")
        print(f"  RNA-seq only subjects: {len(rnaseq_only):,}")
        print(f"  WGS only subjects: {len(wgs_only):,}")
        
        # Calculate RNA-seq samples for paired subjects
        paired_rnaseq_samples = rnaseq_gtex[rnaseq_gtex['gtex_subject'].isin(overlap)]
        print(f"  Total RNA-seq samples from paired subjects: {len(paired_rnaseq_samples):,}")
        
        # Tissue distribution for paired subjects
        if len(paired_rnaseq_samples) > 0 and 'tissue' in paired_rnaseq_samples.columns:
            tissue_counts = paired_rnaseq_samples['tissue'].value_counts()
            print(f"\n📊 Tissue distribution for paired subjects (top 10):")
            for tissue, count in tissue_counts.head(10).items():
                print(f"    {tissue}: {count:,} samples")
        
        return {
            'rnaseq_subjects': len(rnaseq_subjects),
            'wgs_subjects': len(wgs_subjects),
            'paired_subjects': list(overlap),
            'paired_count': len(overlap),
            'rnaseq_only_count': len(rnaseq_only),
            'wgs_only_count': len(wgs_only),
            'paired_rnaseq_samples': len(paired_rnaseq_samples) if len(overlap) > 0 else 0
        }
    
    def analyze_mage_potential(self):
        """Analyze potential for MAGE/1000 Genomes pairing."""
        print("\n=== MAGE/1000 Genomes Analysis ===")
        
        rnaseq_mage = self.rnaseq_data[self.rnaseq_data['dataset'] == 'MAGE'].copy()
        print(f"RNA-seq MAGE samples: {len(rnaseq_mage):,}")
        
        # Check if any WGS data exists for MAGE samples
        mage_samples = set(rnaseq_mage['sample_id'])
        
        # Check for 1000 Genomes pattern matches in WGS data
        potential_matches = 0
        for wgs_sample in self.wgs_data['sample_id']:
            if any(pattern in str(wgs_sample) for pattern in ['HG', 'NA']):
                potential_matches += 1
        
        print(f"📊 MAGE Analysis Results:")
        print(f"  RNA-seq MAGE samples: {len(rnaseq_mage):,}")
        print(f"  WGS samples with 1000G patterns: {potential_matches}")
        print(f"  Note: 1000 Genomes WGS data available publicly but not in this pipeline")
        
        return {
            'rnaseq_mage_count': len(rnaseq_mage),
            'potential_wgs_matches': potential_matches,
            'note': "1000 Genomes WGS publicly available but not processed in this pipeline"
        }
    
    def generate_paired_summary(self):
        """Generate comprehensive paired data summary."""
        print("\n" + "="*60)
        print("COMPREHENSIVE PAIRED MULTI-OMICS ANALYSIS")
        print("="*60)
        
        # Analyze each dataset
        encode_results = self.analyze_encode_overlap()
        gtex_results = self.analyze_gtex_overlap()
        mage_results = self.analyze_mage_potential()
        
        # Overall summary
        total_paired_samples = encode_results['overlap_count'] + gtex_results['paired_rnaseq_samples']
        
        print(f"\n🎯 OVERALL PAIRED DATA SUMMARY:")
        print(f"  Total samples with both RNA-seq + WGS: {total_paired_samples:,}")
        print(f"  ENCODE paired cell lines: {encode_results['overlap_count']}")
        print(f"  GTEx paired subjects: {gtex_results['paired_count']:,}")
        print(f"  GTEx paired RNA-seq samples: {gtex_results['paired_rnaseq_samples']:,}")
        print(f"  MAGE potential (external WGS): {mage_results['rnaseq_mage_count']:,}")
        
        # Save detailed results
        self.analysis_results = {
            'timestamp': datetime.now().isoformat(),
            'total_rnaseq_samples': len(self.rnaseq_data),
            'total_wgs_samples': len(self.wgs_data),
            'encode_analysis': encode_results,
            'gtex_analysis': gtex_results,
            'mage_analysis': mage_results,
            'summary': {
                'total_paired_samples': total_paired_samples,
                'datasets_with_pairs': ['ENCODE', 'GTEx'],
                'largest_paired_cohort': 'GTEx'
            }
        }
        
        return self.analysis_results
    
    def save_results(self, output_file="paired_omics_analysis_results.json"):
        """Save analysis results to file."""
        if self.analysis_results:
            with open(output_file, 'w') as f:
                json.dump(self.analysis_results, f, indent=2)
            print(f"\n💾 Results saved to: {output_file}")
        
    def create_paired_sample_manifest(self):
        """Create a manifest of all paired samples for easy access."""
        manifest = []
        
        # Add ENCODE pairs (when cell line mapping is available)
        # This would need enhancement with actual ENCODE metadata
        
        # Add GTEx pairs
        if 'gtex_analysis' in self.analysis_results:
            paired_subjects = self.analysis_results['gtex_analysis']['paired_subjects']
            
            # Get GTEx data
            rnaseq_gtex = self.rnaseq_data[self.rnaseq_data['dataset'] == 'GTEx'].copy()
            wgs_gtex = self.wgs_data[self.wgs_data['dataset'] == 'GTEx'].copy()
            
            # Extract subject IDs
            rnaseq_gtex['gtex_subject'] = rnaseq_gtex['subject_id']
            wgs_gtex['gtex_subject'] = wgs_gtex['sample_id'].apply(self.extract_gtex_subject)
            
            # Create manifest entries
            for subject in paired_subjects:
                rnaseq_samples = rnaseq_gtex[rnaseq_gtex['gtex_subject'] == subject]
                wgs_samples = wgs_gtex[wgs_gtex['gtex_subject'] == subject]
                
                for _, rna_row in rnaseq_samples.iterrows():
                    for _, wgs_row in wgs_samples.iterrows():
                        manifest.append({
                            'subject_id': subject,
                            'dataset': 'GTEx',
                            'rnaseq_sample_id': rna_row['sample_id'],
                            'wgs_sample_id': wgs_row['sample_id'],
                            'rnaseq_data_type': rna_row['data_type'],
                            'wgs_data_type': wgs_row['data_type'],
                            'tissue': rna_row.get('tissue', 'unknown')
                        })
        
        # Save manifest
        if manifest:
            manifest_df = pd.DataFrame(manifest)
            manifest_file = "paired_samples_manifest.csv"
            manifest_df.to_csv(manifest_file, index=False)
            print(f"💾 Paired samples manifest saved to: {manifest_file}")
            print(f"📊 Total paired sample combinations: {len(manifest_df):,}")
            
            return manifest_df
        
        return None

def main():
    """Main analysis function."""
    print("🧬 Multi-Omics Paired Data Analysis")
    print("=" * 50)
    
    analyzer = PairedOmicsAnalyzer()
    
    # Load data inventories
    if not analyzer.load_inventories():
        print("❌ Failed to load data inventories. Exiting.")
        return
    
    # Perform comprehensive analysis
    results = analyzer.generate_paired_summary()
    
    # Save results
    analyzer.save_results()
    
    # Create paired sample manifest
    manifest = analyzer.create_paired_sample_manifest()
    
    print("\n✅ Analysis complete!")
    print("📁 Output files:")
    print("   - paired_omics_analysis_results.json")
    if manifest is not None:
        print("   - paired_samples_manifest.csv")

if __name__ == "__main__":
    main()